<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
 "topic.dtd">
<?Pub Sty _display FontColor="red"?>
<topic id="ditaotarch" xml:lang="en-us">
<title>DITA Open Toolkit Architecture</title>
<shortdesc>The DITA Open Toolkit is an open source implementation
of the OASIS DITA Technical Committee's specification for Darwin Information
Typing Architecture (DITA) DTDs and schemas. The toolkit uses open
source solution of ANT, XSLT (currently 1.0 for most processing, with
XSLT 2.0 for PDF) and Java to implement transformation functions from
DITA content (maps and topics) into different deliverable formats.</shortdesc>
<body>
<section><title>Processing structure</title><p>Transformations in
the toolkit are designed like a pipeline. All conversions begin with
DITA maps and/or topics going into the pipeline at the start. Generally
speaking, all transformations then go through a common <xref
href="DITA-OTPreprocess.xml">Pre-processing</xref> routine, which
implements processing common to every deliverable format (such as
conref).</p><p>Once the pre-processing is completed, the pipeline
path diverges based on the desired output format. Some processing
may be common; for example, XHTML based processing always continues
to create XHTML, typically before creating TOC or related files for
different platforms. The following image illustrates how the pipeline
works for some common output types.</p><image href="images/mainarch.gif"
placement="break"><alt>Diagram of some possible paths through the
transform pipeline.</alt></image></section>
<section><title>Pipeline modules</title><p>The DITA-OT processing
pipeline is implemented using Ant. Individual modules within the Ant
script are generally implemented in either Java or XSLT, depending
on a variety of factors, such as performance or requirements for customization.
Virtually all Ant and XSLT modules are extensible by adding a plug-in
to the toolkit; new Ant targets may be inserted before or after common
processing, and new rules may be imported into common XSLT modules
to override default processing.</p><p>XSLT modules are all set up
using shell files. Typically, each shell file begins by importing
common rules that apply to all topics. This set of common processing
may in turn import additional common modules, such as those used for
reporting errors or determining the document locale. After the common
files, additional imports may be included in order to support processing
for DITA Specializations.</p><p>For example, XHTML processing is controlled
by the <filepath>dita2xhtml.xsl</filepath> file inside the <filepath>xsl\</filepath> directory.
The shell begins by importing common rules applicable to all general
topics (<filepath>xslhtml\dita2htmlImpl.xsl</filepath>). After that,
overrides are imported for specializations that require modified processing;
for example, a module for reference topics is imported, which is used
to do things like adding default headers to property tables. After
modules for each default specialization, plug-ins may add in additional
processing for local styles or for additional specializations.</p></section>
<!--<section>       <title>Java modules</title>       <p>Java modules
are organized loosely by a Java class named          'PiepleFacade'
which acts as an interface to enable modules can be          called
from command line, another Java program or Ant script.</p>       <p>Here
is a detail description of how a <xref href="DITA-OTGenListModule.xml">GenList
module</xref> in the          preprocessing stage is implemented in
Java</p>     </section>-->
<?Pub Caret 344?>
</body>
</topic>
<?Pub *0000003714?>
