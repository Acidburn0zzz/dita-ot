<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "../dtd/concept.dtd">
<!-- 
This file is part of the DITA Open Toolkit project hosted on Sourceforge.net.
See the accompanying license.txt file for applicable licenses.
-->
<concept id="implementing_infodesign_reuse">
	<title>Implementing information design reuse (specialization)</title>
	<prolog>
		<author type="creator">Richard Johnson</author>
		<author type="contributor">Anna van Raaphorst</author>
		<publisher>OASIS (Organization for the Advancement of Structured Information Standards)</publisher>
		<copyright>
			<copyryear year="2006"/>
			<copyrholder>VR Communications, Inc.</copyrholder>
		</copyright>
		<critdates>
			<created date="2006-May-01"/>
			<revised modified="2006-October-17"/>
		</critdates>
		<metadata>
			<keywords>
				<keyword>reuse concepts and techniques</keyword>
				<keyword>specialization</keyword>
				<indexterm>reuse concepts and techniques
				<indexterm>information design (specialization)</indexterm>
				</indexterm>
				<indexterm>information design reuse (specialization)</indexterm>
				<indexterm>specialization (information design reuse)</indexterm>
			</keywords>
			<prodinfo>
				<prodname>DITA Open Toolkit</prodname>
				<vrmlist>
					<vrm version="1.3"/>
				</vrmlist>
			</prodinfo>
		</metadata>
	</prolog>
	<conbody>
		<section>
			<title>About information design reuse (specialization)</title>
		</section>
		<section conref="../core_vocabulary/specialization.dita#specialization/specialization_term"/>
		<section>
		<title>Why specialization?</title>
		<p>Specialization can have significant benefits for the development of new document architectures, for the following reasons.</p>
		<ul>
			<li>No need to reinvent the base vocabulary. Create a module in half a day with 10 lines versus six months with hundreds of lines; automatically pick up changes to the base.</li>
			<li>No impact from other designs that customize for different purposes. Avoid enormous, kitchen-sink vocabularies. Plug in the modules for your requirements.</li>
			<li>Interoperability at the base type. Guaranteed reversion from special to base.</li>
			<li>Reusable type hierarchies. Share understanding of information across groups, saving time and presenting a consistent picture to customers.</li>
			<li>Output tailored to customers and information. More specific search, filtering, and reuse that is designed for your customers and information, not just the common denominator.</li>
			<li>Consistency, both with base standards and within your information set.</li>
			<li>Learning support for new writers. Instead of learning standard markup plus specific ways to apply the markup, writers get specific markup with guidelines built in.</li>
			<li>Explicit support of different product architectural requirements. Requirements of different products and architectures can be supported and enforced, rather than suggested and monitored by editorial staff.</li>
		</ul>
		</section>
		<section>
		<title>When to use specialization</title>
			<p>Use specialization when you are dealing with new semantics (new, meaningful categories of information, either in the form of new structural types or new domains). The new semantics can be encoded as part of a specialization hierarchy that allows them to be transformed back to more general equivalents, and also ensures that the specialized content can be processed by existing transforms.</p>
		</section>
		<section>
			<title>Creating a specialization</title>
			<p>When choosing an element to specialize, look for a base element that:</p>
			<ul>
				<li>Has a more general meaning that also applies to your content</li>
				<li>Can accommodate the substructure of your content</li>
			</ul>
			<p>Within the Toolkit <filepath>dtd</filepath> directory, create a DTD module in which the DTD elements derive from the elements of an existing DTD module.</p>
		</section>
		<section>
			<title>Processing a specialization</title>
			<p>If you do not modify the Toolkit processing, the Toolkit built-in generalization process automatically promotes your specialized element to the base element from which it derives, and processes it the same way it processes the base element.</p>
			<p>If you want to modify the default processing, create a new XSLT script in the Toolkit <filepath>xsl</filepath> directory that imports the base XSLT script and provides special formatting for your specialized element.</p>
			<p>In your Ant build script,  add an "args.xsl" parameter to cause your new XSLT script to be used instead of the default.</p>
		</section>
		<section>
		<title>Specialization examples</title>
		<p>For 
			examples of how to do specializations, see <xref href="http://www-128.ibm.com/developerworks/xml/library/x-dita2/" format="html" scope="external"/>.
			</p>
		</section>
		<section>
		<title>Limits of specialization</title>
		<p>There are times when a new structural or domain type appears not to fit into the existing hierarchy, based on the semantics of the existing types and the restrictions of the specialization process. In these cases, consider the following options before abandoning the idea of specialization:</p>
		<ul>
			<li><b>Specialize from generic elements.</b> For example, if you want to create a new kind of list but cannot usefully do so specializing from &lt;ul&gt;, &lt;ol&gt;, &lt;sl&gt;, or &lt;dl&gt;, you can create a new set of list elements by specializing nested &lt;ph&gt; elements. This new list structure will not be semantically tied to the other lists by ancestry, and so will require specialized processing to receive appropriate output styling. However, it will remain a valid DITA specialization, with the standard support for generalization, content referencing, conditional processing, and so forth. Always specialize from the semantically closest match whenever possible.</li>
			<li><b>Create a customized subset document type.</b> Customized subset document types are not compliant with the DITA standard, and may not be supported by standards-compliant tools. However, they can help limit the quantity and mitigate the consequences of non-standard design in a customized implementation. Your customized document type can be transformed to a standard document type as part of the publishing pipeline. For example, if an authoring group requires additional metadata attributes, and finds authoring multiple metadata axes in one attribute (otherprops) unusable, the document type could be customized to add metadata attributes and then preprocessed to push those values into otherprops before feeding the documents into a standard publishing process. Customized document types are not compliant with the DITA standard and will not be supported by standards-compliant tools. However, a customized document type can help isolate and control the implications of non-standard design in a customized implementation.</li>
		</ul>
		</section>
	</conbody>
	<related-links>
		<link href="../processing/antparms.dita" scope="local"/>
		<link href="../reusing/implementing_processing_reuse.dita" scope="local"/>
	</related-links>
</concept>
