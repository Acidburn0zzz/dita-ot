<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "../dtd/concept.dtd">
<concept id="specialization_overview">
	<title>Specialization overview</title>
	<shortdesc>Overview information about creating a specialization</shortdesc>
	<prolog>
		<author type="creator">Richard Johnson</author>
		<author type="contributor">Anna van Raaphorst</author>
		<publisher>OASIS (Organization for the Advancement of Structured Information Standards)</publisher>
		<copyright>
			<copyryear year="2006"/>
			<copyrholder>VR Communications, Inc.</copyrholder>
		</copyright>
		<critdates>
			<created date="2006-May-01"/>
			<revised modified="2006-August-08"/>
		</critdates>
		<metadata>
			<keywords>
				<keyword>reuse concepts and techniques</keyword>
				<keyword>specialization</keyword>
				<indexterm>reuse concepts and techniques
				<indexterm>specialization</indexterm>
				</indexterm>
				<indexterm>specialization
				<indexterm>implementing</indexterm>
				</indexterm>
			</keywords>
			<prodinfo>
				<prodname>DITA Open Toolkit</prodname>
				<vrmlist>
					<vrm version="1.2.2"/>
				</vrmlist>
			</prodinfo>
		</metadata>
	</prolog>
	<conbody>
		<section>
			<title>About specialization</title>
		</section>
		<section conref="../core_vocabulary/specialization.dita#specialization/specialization_term"/>
		<section>
			<title>Creating a specialization</title>
			<p>When choosing an element to specialize, look for a base element that:</p>
			<ul>
				<li>Has a more general meaning that also applies to your content</li>
				<li>Can accommodate the substructure of your content</li>
			</ul>
			<p>Within the Toolkit <filepath>dtd</filepath> directory, create a DTD module in which the DTD elements derive from the elements of an existing DTD module.</p>
		</section>
		<section>
			<title>Processing a specialization</title>
			<p>If you do not modify the Toolkit processing, the Toolkit built-in generalization process automatically promotes your specialized element to the base element from which it derives, and processes it the same way it processes the base element.</p>
			<p>If you want to modify the default processing, create a new XSLT script in the Toolkit <filepath>xsl</filepath> directory that imports the base XSLT script and provides special formatting for your specialized element.</p>
			<p>In your Ant build script,  add an "args.xsl" parameter to cause your new XSLT script to be used instead of the default.</p>
		</section>
	</conbody>
	<related-links>
		<link href="../processing/antparms.dita" scope="local"/>
		<link href="../reusing/implementingprocessing_reuse.dita" scope="local"/>
	</related-links>
</concept>
