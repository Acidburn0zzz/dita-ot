<?xml version="1.0" encoding="utf-8"?>
<!-- This file is part of the DITA Open Toolkit project hosted on 
     Sourceforge.net. See the accompanying license.txt file for 
     applicable licenses.-->
<!-- (c) Copyright IBM Corp. 2012 All Rights Reserved. -->
<project name="flag">
	

    <target name="preprocess_flagging" description="Add flagging information to topics" if="dita.input.valfile">
      <makeurl file="${dita.input.valfile}" property="dita.input.filterfile.url" validate="no"></makeurl>
      <xslt taskname="preprocess_flag" 
          basedir="${dita.temp.dir}" 
          destdir="${dita.temp.dir}" 
          includesfile="${dita.temp.dir}/${fullditatopicfile}" 
          classpathref="dost.class.path" 
          reloadstylesheet="${dita.preprocess.reloadstylesheet}" 
          style="${dita.plugin.net.sourceforge.dita-ot.flagging.dir}/xsl/flag.xsl"
          filenameparameter="FILENAME" 
          filedirparameter="FILEDIR">
        <excludesfile name="${dita.temp.dir}${file.separator}${resourceonlyfile}" if="resourceonlyfile"></excludesfile>
        <includesfile name="${dita.temp.dir}/${chunkedtopicfile}" if="chunkedtopicfile"></includesfile>

        <param name="TRANSTYPE" expression="${transtype}"></param>
        <param name="DITAEXT" expression="${dita.ext}" if="dita.ext"></param>
        <param name="FILTERFILE" expression="${dita.input.filterfile.url}"></param>
        <param name="DRAFT" expression="${args.draft}" if="args.draft"></param>
        <param name="BASEDIR" expression="${basedir}"></param>
        <param name="OUTPUTDIR" expression="${output.dir}"></param>
        <param name="DBG" expression="${args.debug}" if="args.debug"></param>

        <mapper type="glob" from="*" to="*.flag"></mapper>
        <xmlcatalog refid="dita.catalog"></xmlcatalog>
      </xslt>
      <move todir="${dita.temp.dir}">
        <fileset dir="${dita.temp.dir}" includes="**/*.flag"></fileset>
        <mapper type="glob" from="*.flag" to="*"></mapper>
      </move>
    </target>
    

  	
    <target name="dita.out.map.xhtml.tocBLAH" unless="noMap" if="inner.transform" description="Build HTML TOC file,which will adjust the directory">
        <xslt basedir="${dita.temp.dir}" destdir="${output.dir}" includesfile="${dita.temp.dir}${file.separator}${user.input.file.listfile}" classpathref="dost.class.path" style="${args.xhtml.toc.xsl}">
        	<excludesfile name="${dita.temp.dir}${file.separator}${resourceonlyfile}" if="resourceonlyfile"></excludesfile>
            <param name="DITAEXT" expression="${dita.ext}" if="dita.ext"></param>
            <param name="OUTEXT" expression="${out.ext}" if="out.ext"></param>
            <param name="contenttarget" expression="${args.xhtml.contenttarget}" if="args.xhtml.contenttarget"></param>
            <param name="CSS" expression="${args.css.file}" if="args.css.file"></param>
            <param name="CSSPATH" expression="${user.csspath}" if="user.csspath"></param>
            <param name="OUTPUTCLASS" expression="${args.xhtml.toc.class}" if="args.xhtml.toc.class"></param>
            
            <mapper type="glob" from="${user.input.file}" to="${args.xhtml.toc}${out.ext}"></mapper>
          <xmlcatalog refid="dita.catalog"></xmlcatalog>
        </xslt>
    </target>
    
  <target name="copy-revflag" if="dita.input.valfile">
    <dita-ot-echo id="DOTA069W">
      <param name="1" value="copy-revflag"></param>
    </dita-ot-echo>
  </target>
    
  <target name="copy-css" unless="user.csspath.url" description="Copy CSS files">
    <condition property="user.copycss.yes">
      <and>
        <equals arg1="${args.copycss}" arg2="yes"></equals>
        <isset property="args.css.present"></isset>
      </and>
    </condition>
    <property name="user.csspath.real" location="${output.dir}/${user.csspath}"></property>
    <mkdir dir="${user.csspath.real}"></mkdir>
    <!-- Always copy system default css files -->
    <copy todir="${user.csspath.real}">
      <fileset dir="${dita.resource.dir}" includes="*.css"></fileset>
    </copy>
    <!-- Copy user specify css file when required -->
    <antcall target="copy-css-user"></antcall>
  </target>

  <target name="copy-css-user" if="user.copycss.yes">
    <copy file="${args.css.real}" todir="${user.csspath.real}"></copy>
  </target>
  
</project>