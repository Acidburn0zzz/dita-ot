<?xml version="1.0" encoding="UTF-8"?>
<!-- This file is part of the DITA Open Toolkit project.
     See the accompanying license.txt file for applicable licenses.
-->
<project xmlns:dita="http://dita-ot.sourceforge.net" name="ditaot-np">

  <target name="np.preprocess"
    dita:depends="{depend.preprocess.pre},
                  np.init,
                  np.gen-list-debug-filter,
                  keyref,
                  conrefpush,
                  conref,
                  np.profile,
                  move-meta-entries,
                  coderef,
                  mapref,
                  mappull,
                  chunk,
                  maplink,
                  move-links,
                  topicpull,
                  flag-module,
                  copy-files,
                  {depend.preprocess.post}"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    description="Preprocessing" />  

  <target name="np.init">
    <!-- Compatibility with preprocess -->
    <makeurl property="args.input.uri" file="${args.input}" validate="no"/>
    
    <dita-ot-fail id="DOTA002F">
      <condition>
        <and>
          <not>
            <isset property="args.input.uri"/>
          </not>
        </and>
      </condition>
    </dita-ot-fail>
    
    <taskdef name="uri-basename" classname="org.dita.dost.util.UriBasenameTask"/>
    <taskdef name="uri-dirname" classname="org.dita.dost.util.UriDirnameTask"/>
    
    <!-- start file name, e.g. main.ditamap -->
    <uri-basename property="dita.input.filename" file="${args.input.uri}"/>    
    <!-- start file name without extension, e.g. main -->
    <uri-basename property="dita.map.filename.root" file="${dita.input.filename}" suffix=".*"/>
    <uri-basename property="dita.topic.filename.root" file="${dita.input.filename}" suffix=".*"/>    

    <!-- absolute input directory, e.g. /Users/me/work -->
    <condition property="dita.input.dirname" value="${args.input.dir.uri}">
      <isset property="args.input.dir.uri"/>
    </condition>
    <uri-dirname property="dita.input.dirname" file="${args.input.uri}" />
    
    <echo level="info">*****************************************************************</echo>
    <echo level="info">* input = ${args.input.uri}</echo>
    <echo level="info">* inputdir = ${dita.input.dirname}</echo>
    <echo level="info">*****************************************************************</echo>
  </target>
 
  <!-- gen-list-debug-filter
      Create the manifest files listing which files are referenced by the input file (even indirectly).
      Copy input files to ${dita.temp.dir} tree.
      While copying, populate default attributes like @class,
      add @xtrf and @xtrc and filter out elements according to valfile, if any. -->
  <target name="np.gen-list-debug-filter"
          dita:depends="{depend.preprocess.gen-list-debug-filter.pre}"
          dita:extension="depends org.dita.dost.platform.InsertDependsAction"
          unless="preprocess.gen-list-debug-filter.skip"
          description="Generate file list, debug and filter input files">
    <pipeline message="Generate list debug and filtering." taskname="gen-list-filter"
              inputmap="${args.input}"
              tempdir="${dita.temp.dir}">
      <module class="org.dita.dost.module.GenMapAndTopicListDebugAndFilterModule">
        <param name="inputmap.uri" value="${args.input.uri}" if="args.input.uri"/>
        <param name="inputdir.uri" value="${args.input.dir.uri}" if="args.input.dir.uri"/>
        <param name="ditadir" location="${dita.dir}"/>
        <!--param name="ditaext" value="${dita.ext}" if="dita.ext"/-->
        <param name="ditaval" location="${dita.input.valfile}" if="dita.input.valfile"/>
        <param name="generatecopyouter" value="${generate.copy.outer}"/>
        <param name="gramcache" value="${args.grammar.cache}"/>
        <param name="inputdir" location="${args.input.dir}" if="args.input.dir"/>
        <param name="onlytopicinmap" value="${onlytopic.in.map}"/>
        <param name="outercontrol" value="${outer.control}"/>
        <param name="outputdir" location="${output.dir}"/>
        <param name="setsystemid" value="${args.xml.systemid.set}"/>
        <param name="transtype" value="${transtype}"/>
        <param name="validate" value="${validate}"/>
      </module>
    </pipeline>
    <!-- generate list files -->
    <job-helper file="canditopics.list" property="canditopicslist"/>
    <job-helper file="coderef.list" property="codereflist"/>
    <job-helper file="conref.list" property="conreflist"/>
    <job-helper file="conrefpush.list" property="conrefpushlist"/>
    <job-helper file="conreftargets.list" property="conreftargetslist"/>
    <job-helper file="copytosource.list" property="copytosourcelist"/>
    <job-helper file="flagimage.list" property="flagimagelist"/>
    <job-helper file="fullditamap.list" property="fullditamaplist"/>
    <job-helper file="fullditamapandtopic.list" property="fullditamapandtopiclist"/>
    <job-helper file="fullditatopic.list" property="fullditatopiclist"/>
    <job-helper file="hrefditatopic.list" property="hrefditatopiclist"/>
    <job-helper file="hreftargets.list" property="hreftargetslist"/>
    <job-helper file="html.list" property="htmllist"/>
    <job-helper file="image.list" property="imagelist"/>
    <job-helper file="keyref.list" property="keyreflist"/>
    <job-helper file="outditafiles.list" property="outditafileslist"/>
    <job-helper file="resourceonly.list" property="resourceonlylist"/>
    <job-helper file="skipchunk.list" property="skipchunklist"/>
    <job-helper file="subjectscheme.list" property="subjectschemelist"/>
    <job-helper file="subtargets.list" property="subtargetslist"/>
    <job-helper file="user.input.file.list" property="user.input.file"/>
    <property name="canditopicsfile" value="canditopics.list"/>
    <property name="codereffile" value="coderef.list"/>
    <property name="conreffile" value="conref.list"/>
    <property name="conrefpushfile" value="conrefpush.list"/>
    <property name="conreftargetsfile" value="conreftargets.list"/>
    <property name="copytosourcefile" value="copytosource.list"/>
    <property name="flagimagefile" value="flagimage.list"/>
    <property name="fullditamapandtopicfile" value="fullditamapandtopic.list"/>
    <property name="fullditamapfile" value="fullditamap.list"/>
    <property name="fullditatopicfile" value="fullditatopic.list"/>
    <property name="hrefditatopicfile" value="hrefditatopic.list"/>
    <property name="hreftargetsfile" value="hreftargets.list"/>
    <property name="htmlfile" value="html.list"/>
    <property name="imagefile" value="image.list"/>
    <property name="keyreffile" value="keyref.list"/>
    <property name="outditafilesfile" value="outditafiles.list"/>
    <property name="resourceonlyfile" value="resourceonly.list"/>
    <property name="skipchunkfile" value="skipchunk.list"/>
    <property name="subjectschemefile" value="subjectscheme.list"/>
    <property name="subtargetsfile" value="subtargets.list"/>
    <xmlpropertyreader file="${dita.temp.dir}/dita.xml.properties"/>
    <dirname property="dita.map.output.dir" file="${output.dir}/${user.input.file}" />
    <condition property="noConref">
      <length file="${dita.temp.dir}/${conreffile}" length="0"/>
    </condition>
    <condition property="noMap">
      <length file="${dita.temp.dir}/${fullditamapfile}" length="0"/>
    </condition>
    <condition property="noImagelist">
      <length file="${dita.temp.dir}/${imagefile}" length="0"/>
    </condition>
    <condition property="noHtmllist">
      <length file="${dita.temp.dir}/${htmlfile}" length="0"/>
    </condition>
    <condition property="noSublist">
      <length file="${dita.temp.dir}/${subtargetsfile}" length="0"/>
    </condition>
    <condition property="noConrefPush">
      <length file="${dita.temp.dir}/${conrefpushfile}" length="0"/>
    </condition>
    <condition property="noKeyref">
      <length file="${dita.temp.dir}/${keyreffile}" length="0"/>
    </condition>
    <condition property="noCoderef">
      <length file="${dita.temp.dir}/${codereffile}" length="0"/>
    </condition>
  </target>
 
  <!-- profile -->
  <target name="np.profile" depends="np.profile-check"
          unless="preprocess.profile.skip"
          description="Profile input files">
    <pipeline message="Profile filtering." taskname="profile"
              inputmap="${args.input}"
              tempdir="${dita.temp.dir}">
      <module class="org.dita.dost.module.FilterModule">
        <param name="ditadir" location="${dita.dir}"/>
        <param name="ditaval" location="${dita.input.valfile}" if="dita.input.valfile"/>
        <param name="inputdir" location="${args.input.dir}" if="args.input.dir"/>
        <param name="outputdir" location="${output.dir}"/>
        <param name="setsystemid" value="${args.xml.systemid.set}"/>
        <param name="transtype" value="${transtype}"/>
      </module>
    </pipeline>
    <!-- update list files -->
    <job-helper file="fullditatopic.list" property="fullditatopiclist"/>
    <job-helper file="fullditamap.list" property="fullditamaplist"/>
    <job-helper file="fullditamapandtopic.list" property="fullditamapandtopiclist"/>
    <job-helper file="chunkedditamap.list" property="chunkedditamaplist"/>
    <job-helper file="chunkedtopic.list" property="chunkedtopiclist"/>
    <job-helper file="resourceonly.list" property="resourceonlylist"/>
    <job-helper file="copytosource.list" property="copytosourcelist"/>
    <job-helper file="copytotarget2sourcemap.list" property="copytotarget2sourcemaplist"/>
    <xmlpropertyreader file="${dita.temp.dir}/dita.xml.properties"/>
    <condition property="noTopic">
      <length file="${dita.temp.dir}/${fullditatopicfile}" length="0"/>
    </condition>
  </target>
  
  <target name="np.profile-check">
    <condition property="preprocess.profile.skip">
      <not>
        <isset property="dita.input.valfile"/>
      </not>
    </condition>
  </target>
    
</project>
